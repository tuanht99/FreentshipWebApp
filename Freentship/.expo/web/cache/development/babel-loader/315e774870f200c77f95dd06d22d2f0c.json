{"ast":null,"code":"import React from 'react';\nimport DemoProduct from \"./Screens/DemoProductView\";\nimport DetailsScreen from \"./Screens/DetailsScreen\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar Stack = createStackNavigator();\nexport default function App() {\n  return _jsx(NavigationContainer, {\n    children: _jsxs(Stack.Navigator, {\n      children: [_jsx(Stack.Screen, {\n        name: \"DemoProduct\",\n        component: DemoProduct\n      }), _jsx(Stack.Screen, {\n        name: \"DetailsScreen\",\n        component: DetailsScreen\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","DemoProduct","DetailsScreen","NavigationContainer","createStackNavigator","Stack","App"],"sources":["C:/Users/Phu/Music/FreentshipWebApp/Freentship/App.js"],"sourcesContent":["//stack\r\nimport React from 'react';\r\nimport DemoProduct from './Screens/DemoProductView';\r\nimport DetailsScreen from './Screens/DetailsScreen';\r\nimport { NavigationContainer } from '@react-navigation/native';\r\nimport { createStackNavigator } from '@react-navigation/stack';\r\n\r\n\r\n\r\nconst Stack = createStackNavigator();\r\nexport default function App() {\r\n  return (\r\n    <NavigationContainer>\r\n      <Stack.Navigator>\r\n        <Stack.Screen name=\"DemoProduct\" component={DemoProduct}></Stack.Screen>\r\n        <Stack.Screen name=\"DetailsScreen\" component={DetailsScreen}></Stack.Screen>\r\n      </Stack.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\n//   const [text, setText] = useState(\"\")\r\n\r\n//   // MARK: CRUD Functions\r\n//   const Create = () => {\r\n//     // MARK: Creating New Doc in Firebase\r\n//     // Before that enable Firebase in Firebase Console\r\n//     const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n\r\n//     // Your Document Goes Here\r\n//     const docData = {\r\n//       \"name\": \"iJustine\",\r\n//       \"bio\": \"YouTuber\"\r\n//     }\r\n\r\n//     setDoc(myDoc, docData)\r\n//       // Handling Promises\r\n//       .then(() => {\r\n//         // MARK: Success\r\n//         alert(\"Document Created!\")\r\n//       })\r\n//       .catch((error) => {\r\n//         // MARK: Failure\r\n//         alert(error.message)\r\n//       })\r\n//   }\r\n\r\n//   const Read = () => {\r\n//     // MARK: Reading Doc\r\n//     // You can read what ever document by changing the collection and document path here\r\n//     const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n\r\n//     getDoc(myDoc)\r\n//       // Handling Promises\r\n//       .then((snapshot) => {\r\n//         // MARK: Success\r\n//         if (snapshot.exists) {\r\n//           setUserDoc(snapshot.data())\r\n//         }\r\n//         else {\r\n//           alert(\"No Doc Found\")\r\n//         }\r\n//       })\r\n//       .catch((error) => {\r\n//         // MARK: Failure\r\n//         alert(error.message)\r\n//       })\r\n\r\n//   }\r\n\r\n//   const Update = (value, merge) => {\r\n//     // MARK: Updating Doc\r\n//     const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n\r\n//     // If you set merge true then it will merge with existing doc otherwise it will be a fresh one\r\n//     setDoc(myDoc, value, { merge: merge })\r\n//       // Handling Promises\r\n//       .then(() => {\r\n//         // MARK: Success\r\n//         alert(\"Updated Successfully!\")\r\n//         setText(\"\")\r\n//       })\r\n//       .catch((error) => {\r\n//         // MARK: Failure\r\n//         alert(error.message)\r\n//       })\r\n//   }\r\n\r\n//   const Delete = () => {\r\n//     // MARK: Deleting Doc\r\n//     const myDoc = doc(db, \"MyCollection\", \"MyDocument\")\r\n\r\n//     deleteDoc(myDoc)\r\n//       // Handling Promises\r\n//       .then(() => {\r\n//         // MARK: Success\r\n//         alert(\"Deleted Successfully!\")\r\n//       })\r\n//       .catch((error) => {\r\n//         // MARK: Failure\r\n//         alert(error.message)\r\n//       })\r\n\r\n//   }\r\n\r\n//   return (\r\n//     <View style={styles.container}>\r\n//       <Button title='Create New Doc' onPress={Create}></Button>\r\n//       <Button title='Read Doc' onPress={Read}></Button>\r\n//       {\r\n//         userDoc != null &&\r\n//         <Text>Bio: {userDoc.bio}</Text>\r\n//       }\r\n//       <TextInput style={{\r\n//         width: '95%',\r\n//         fontSize: 18,\r\n//         padding: 12,\r\n//         borderColor: 'gray',\r\n//         borderWidth: 0.2,\r\n//         borderRadius: 10,\r\n//         marginVertical: 20\r\n//       }} placeholder='Type Here' onChangeText={(text) => { setText(text) }} value={text}></TextInput>\r\n\r\n//       <Button title='Update Doc' onPress={() => {\r\n//         Update({\r\n//           \"bio\": text\r\n//         }, true)\r\n//       }} disabled={text == \"\"}></Button>\r\n//       <Button title='Delete Doc' onPress={Delete}></Button>\r\n//     </View>\r\n//   );\r\n// }\r\n\r\n// const styles = StyleSheet.create({\r\n//   container: {\r\n//     flex: 1,\r\n//     backgroundColor: '#fff',\r\n//     alignItems: 'center',\r\n//     justifyContent: 'center',\r\n//   },\r\n// });"],"mappings":"AACA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,WAAP;AACA,OAAOC,aAAP;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,SAASC,oBAAT,QAAqC,yBAArC;;;AAIA,IAAMC,KAAK,GAAGD,oBAAoB,EAAlC;AACA,eAAe,SAASE,GAAT,GAAe;EAC5B,OACE,KAAC,mBAAD;IAAA,UACE,MAAC,KAAD,CAAO,SAAP;MAAA,WACE,KAAC,KAAD,CAAO,MAAP;QAAc,IAAI,EAAC,aAAnB;QAAiC,SAAS,EAAEL;MAA5C,EADF,EAEE,KAAC,KAAD,CAAO,MAAP;QAAc,IAAI,EAAC,eAAnB;QAAmC,SAAS,EAAEC;MAA9C,EAFF;IAAA;EADF,EADF;AAQD"},"metadata":{},"sourceType":"module"}