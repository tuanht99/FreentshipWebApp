{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nimport * as React from 'react';\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport InteractionManager from \"react-native-web/dist/exports/InteractionManager\";\nimport Keyboard from \"react-native-web/dist/exports/Keyboard\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { PanGestureHandler, State as GestureState } from 'react-native-gesture-handler';\nimport Animated, { interpolate, runOnJS, useAnimatedGestureHandler, useAnimatedStyle, useDerivedValue, useSharedValue, withSpring } from 'react-native-reanimated';\nimport DrawerProgressContext from \"../../utils/DrawerProgressContext\";\nimport Overlay from \"./Overlay\";\nvar SWIPE_DISTANCE_MINIMUM = 5;\nvar DEFAULT_DRAWER_WIDTH = '80%';\n\nvar minmax = function minmax(value, start, end) {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer(_ref) {\n  var dimensions = _ref.dimensions,\n      drawerPosition = _ref.drawerPosition,\n      drawerStyle = _ref.drawerStyle,\n      drawerType = _ref.drawerType,\n      gestureHandlerProps = _ref.gestureHandlerProps,\n      hideStatusBarOnOpen = _ref.hideStatusBarOnOpen,\n      keyboardDismissMode = _ref.keyboardDismissMode,\n      onClose = _ref.onClose,\n      onOpen = _ref.onOpen,\n      open = _ref.open,\n      overlayStyle = _ref.overlayStyle,\n      renderDrawerContent = _ref.renderDrawerContent,\n      renderSceneContent = _ref.renderSceneContent,\n      statusBarAnimation = _ref.statusBarAnimation,\n      swipeDistanceThreshold = _ref.swipeDistanceThreshold,\n      swipeEdgeWidth = _ref.swipeEdgeWidth,\n      swipeEnabled = _ref.swipeEnabled,\n      swipeVelocityThreshold = _ref.swipeVelocityThreshold;\n\n  var getDrawerWidth = function getDrawerWidth() {\n    var _ref2 = StyleSheet.flatten(drawerStyle) || {},\n        _ref2$width = _ref2.width,\n        width = _ref2$width === void 0 ? DEFAULT_DRAWER_WIDTH : _ref2$width;\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      var percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  var drawerWidth = getDrawerWidth();\n  var isOpen = drawerType === 'permanent' ? true : open;\n  var isRight = drawerPosition === 'right';\n  var getDrawerTranslationX = React.useCallback(function (open) {\n    'worklet';\n\n    if (drawerPosition === 'left') {\n      return open ? 0 : -drawerWidth;\n    }\n\n    return open ? 0 : drawerWidth;\n  }, [drawerPosition, drawerWidth]);\n  var hideStatusBar = React.useCallback(function (hide) {\n    if (hideStatusBarOnOpen) {\n      StatusBar.setHidden(hide, statusBarAnimation);\n    }\n  }, [hideStatusBarOnOpen, statusBarAnimation]);\n  React.useEffect(function () {\n    hideStatusBar(isOpen);\n    return function () {\n      return hideStatusBar(false);\n    };\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n  var interactionHandleRef = React.useRef(null);\n\n  var startInteraction = function startInteraction() {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  var endInteraction = function endInteraction() {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  var hideKeyboard = function hideKeyboard() {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  var onGestureStart = function onGestureStart() {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  var onGestureFinish = function onGestureFinish() {\n    endInteraction();\n  };\n\n  var hitSlop = isRight ? {\n    right: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  } : {\n    left: 0,\n    width: isOpen ? undefined : swipeEdgeWidth\n  };\n  var touchStartX = useSharedValue(0);\n  var touchX = useSharedValue(0);\n  var translationX = useSharedValue(getDrawerTranslationX(open));\n  var gestureState = useSharedValue(GestureState.UNDETERMINED);\n  var toggleDrawer = React.useCallback(function (open, velocity) {\n    'worklet';\n\n    var translateX = getDrawerTranslationX(open);\n    touchStartX.value = 0;\n    touchX.value = 0;\n    translationX.value = withSpring(translateX, {\n      velocity: velocity,\n      stiffness: 1000,\n      damping: 500,\n      mass: 3,\n      overshootClamping: true,\n      restDisplacementThreshold: 0.01,\n      restSpeedThreshold: 0.01\n    });\n\n    if (open) {\n      runOnJS(onOpen)();\n    } else {\n      runOnJS(onClose)();\n    }\n  }, [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]);\n  React.useEffect(function () {\n    return toggleDrawer(open);\n  }, [open, toggleDrawer]);\n  var onGestureEvent = useAnimatedGestureHandler({\n    onStart: function onStart(event, ctx) {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n      runOnJS(onGestureStart)();\n    },\n    onActive: function onActive(event, ctx) {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: function onEnd(event) {\n      gestureState.value = event.state;\n      var nextOpen = Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM && Math.abs(event.translationX) > swipeVelocityThreshold || Math.abs(event.translationX) > swipeDistanceThreshold ? drawerPosition === 'left' ? (event.velocityX === 0 ? event.translationX : event.velocityX) > 0 : (event.velocityX === 0 ? event.translationX : event.velocityX) < 0 : open;\n      toggleDrawer(nextOpen, event.velocityX);\n    },\n    onFinish: function onFinish() {\n      runOnJS(onGestureFinish)();\n    }\n  });\n  var translateX = useDerivedValue(function () {\n    var touchDistance = drawerType === 'front' && gestureState.value === GestureState.ACTIVE ? minmax(drawerPosition === 'left' ? touchStartX.value - drawerWidth : dimensions.width - drawerWidth - touchStartX.value, 0, dimensions.width) : 0;\n    var translateX = drawerPosition === 'left' ? minmax(translationX.value + touchDistance, -drawerWidth, 0) : minmax(translationX.value - touchDistance, 0, drawerWidth);\n    return translateX;\n  });\n  var isRTL = I18nManager.getConstants().isRTL;\n  var drawerAnimatedStyle = useAnimatedStyle(function () {\n    var distanceFromEdge = dimensions.width - drawerWidth;\n    return {\n      transform: drawerType === 'permanent' ? [] : [{\n        translateX: (drawerType === 'back' ? 0 : translateX.value) + (drawerPosition === 'left' ? isRTL ? -distanceFromEdge : 0 : isRTL ? 0 : distanceFromEdge)\n      }]\n    };\n  });\n  var contentAnimatedStyle = useAnimatedStyle(function () {\n    return {\n      transform: drawerType === 'permanent' ? [] : [{\n        translateX: drawerType === 'front' ? 0 : translateX.value + drawerWidth * (drawerPosition === 'left' ? 1 : -1)\n      }]\n    };\n  });\n  var progress = useDerivedValue(function () {\n    return drawerType === 'permanent' ? 1 : interpolate(translateX.value, [getDrawerTranslationX(false), getDrawerTranslationX(true)], [0, 1]);\n  });\n  return React.createElement(DrawerProgressContext.Provider, {\n    value: progress\n  }, React.createElement(PanGestureHandler, _extends({\n    activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n    hitSlop: hitSlop,\n    enabled: drawerType !== 'permanent' && swipeEnabled,\n    onGestureEvent: onGestureEvent\n  }, gestureHandlerProps), React.createElement(Animated.View, {\n    style: [styles.main, {\n      flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n    }]\n  }, React.createElement(Animated.View, {\n    style: [styles.content, contentAnimatedStyle]\n  }, React.createElement(View, {\n    accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n    importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n    style: styles.content\n  }, renderSceneContent()), drawerType !== 'permanent' ? React.createElement(Overlay, {\n    progress: progress,\n    onPress: function onPress() {\n      return toggleDrawer(false);\n    },\n    style: overlayStyle\n  }) : null), React.createElement(Animated.View, {\n    accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n    removeClippedSubviews: Platform.OS !== 'ios',\n    style: [styles.container, {\n      position: drawerType === 'permanent' ? 'relative' : 'absolute',\n      zIndex: drawerType === 'back' ? -1 : 0\n    }, drawerAnimatedStyle, drawerStyle]\n  }, renderDrawerContent()))));\n}\nvar styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"mappings":"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","names":["React","PanGestureHandler","State","GestureState","Animated","interpolate","runOnJS","useAnimatedGestureHandler","useAnimatedStyle","useDerivedValue","useSharedValue","withSpring","DrawerProgressContext","Overlay","SWIPE_DISTANCE_MINIMUM","DEFAULT_DRAWER_WIDTH","minmax","value","start","end","Math","min","max","Drawer","dimensions","drawerPosition","drawerStyle","drawerType","gestureHandlerProps","hideStatusBarOnOpen","keyboardDismissMode","onClose","onOpen","open","overlayStyle","renderDrawerContent","renderSceneContent","statusBarAnimation","swipeDistanceThreshold","swipeEdgeWidth","swipeEnabled","swipeVelocityThreshold","getDrawerWidth","StyleSheet","flatten","width","endsWith","percentage","Number","replace","isFinite","drawerWidth","isOpen","isRight","getDrawerTranslationX","useCallback","hideStatusBar","hide","StatusBar","setHidden","useEffect","interactionHandleRef","useRef","startInteraction","current","InteractionManager","createInteractionHandle","endInteraction","clearInteractionHandle","hideKeyboard","Keyboard","dismiss","onGestureStart","onGestureFinish","hitSlop","right","undefined","left","touchStartX","touchX","translationX","gestureState","UNDETERMINED","toggleDrawer","velocity","translateX","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","onGestureEvent","onStart","event","ctx","startX","state","x","onActive","onEnd","nextOpen","abs","velocityX","onFinish","touchDistance","ACTIVE","isRTL","I18nManager","getConstants","drawerAnimatedStyle","distanceFromEdge","transform","contentAnimatedStyle","progress","Provider","activeOffsetX","failOffsetY","enabled","View","style","styles","main","flexDirection","content","accessibilityElementsHidden","importantForAccessibility","onPress","accessibilityViewIsModal","removeClippedSubviews","Platform","OS","container","position","zIndex","create","top","bottom","maxWidth","flex","select","web","default","overflow"],"sources":["Drawer.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  I18nManager,\n  InteractionManager,\n  Keyboard,\n  Platform,\n  StatusBar,\n  StyleSheet,\n  View,\n} from 'react-native';\nimport {\n  PanGestureHandler,\n  PanGestureHandlerGestureEvent,\n  State as GestureState,\n} from 'react-native-gesture-handler';\nimport Animated, {\n  interpolate,\n  runOnJS,\n  useAnimatedGestureHandler,\n  useAnimatedStyle,\n  useDerivedValue,\n  useSharedValue,\n  withSpring,\n} from 'react-native-reanimated';\n\nimport type { DrawerProps } from '../../types';\nimport DrawerProgressContext from '../../utils/DrawerProgressContext';\nimport Overlay from './Overlay';\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst DEFAULT_DRAWER_WIDTH = '80%';\n\nconst minmax = (value: number, start: number, end: number) => {\n  'worklet';\n\n  return Math.min(Math.max(value, start), end);\n};\n\nexport default function Drawer({\n  dimensions,\n  drawerPosition,\n  drawerStyle,\n  drawerType,\n  gestureHandlerProps,\n  hideStatusBarOnOpen,\n  keyboardDismissMode,\n  onClose,\n  onOpen,\n  open,\n  overlayStyle,\n  renderDrawerContent,\n  renderSceneContent,\n  statusBarAnimation,\n  swipeDistanceThreshold,\n  swipeEdgeWidth,\n  swipeEnabled,\n  swipeVelocityThreshold,\n}: DrawerProps) {\n  const getDrawerWidth = (): number => {\n    const { width = DEFAULT_DRAWER_WIDTH } =\n      StyleSheet.flatten(drawerStyle) || {};\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  const drawerWidth = getDrawerWidth();\n\n  const isOpen = drawerType === 'permanent' ? true : open;\n  const isRight = drawerPosition === 'right';\n\n  const getDrawerTranslationX = React.useCallback(\n    (open: boolean) => {\n      'worklet';\n\n      if (drawerPosition === 'left') {\n        return open ? 0 : -drawerWidth;\n      }\n\n      return open ? 0 : drawerWidth;\n    },\n    [drawerPosition, drawerWidth]\n  );\n\n  const hideStatusBar = React.useCallback(\n    (hide: boolean) => {\n      if (hideStatusBarOnOpen) {\n        StatusBar.setHidden(hide, statusBarAnimation);\n      }\n    },\n    [hideStatusBarOnOpen, statusBarAnimation]\n  );\n\n  React.useEffect(() => {\n    hideStatusBar(isOpen);\n\n    return () => hideStatusBar(false);\n  }, [isOpen, hideStatusBarOnOpen, statusBarAnimation, hideStatusBar]);\n\n  const interactionHandleRef = React.useRef<number | null>(null);\n\n  const startInteraction = () => {\n    interactionHandleRef.current = InteractionManager.createInteractionHandle();\n  };\n\n  const endInteraction = () => {\n    if (interactionHandleRef.current != null) {\n      InteractionManager.clearInteractionHandle(interactionHandleRef.current);\n      interactionHandleRef.current = null;\n    }\n  };\n\n  const hideKeyboard = () => {\n    if (keyboardDismissMode === 'on-drag') {\n      Keyboard.dismiss();\n    }\n  };\n\n  const onGestureStart = () => {\n    startInteraction();\n    hideKeyboard();\n    hideStatusBar(true);\n  };\n\n  const onGestureFinish = () => {\n    endInteraction();\n  };\n\n  // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n  // https://github.com/software-mansion/react-native-gesture-handler/issues/569\n  const hitSlop = isRight\n    ? // Extend hitSlop to the side of the screen when drawer is closed\n      // This lets the user drag the drawer from the side of the screen\n      { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n    : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n  const touchStartX = useSharedValue(0);\n  const touchX = useSharedValue(0);\n  const translationX = useSharedValue(getDrawerTranslationX(open));\n  const gestureState = useSharedValue<GestureState>(GestureState.UNDETERMINED);\n\n  const toggleDrawer = React.useCallback(\n    (open: boolean, velocity?: number) => {\n      'worklet';\n\n      const translateX = getDrawerTranslationX(open);\n\n      touchStartX.value = 0;\n      touchX.value = 0;\n      translationX.value = withSpring(translateX, {\n        velocity,\n        stiffness: 1000,\n        damping: 500,\n        mass: 3,\n        overshootClamping: true,\n        restDisplacementThreshold: 0.01,\n        restSpeedThreshold: 0.01,\n      });\n\n      if (open) {\n        runOnJS(onOpen)();\n      } else {\n        runOnJS(onClose)();\n      }\n    },\n    [getDrawerTranslationX, onClose, onOpen, touchStartX, touchX, translationX]\n  );\n\n  React.useEffect(() => toggleDrawer(open), [open, toggleDrawer]);\n\n  const onGestureEvent = useAnimatedGestureHandler<\n    PanGestureHandlerGestureEvent,\n    { startX: number }\n  >({\n    onStart: (event, ctx) => {\n      ctx.startX = translationX.value;\n      gestureState.value = event.state;\n      touchStartX.value = event.x;\n\n      runOnJS(onGestureStart)();\n    },\n    onActive: (event, ctx) => {\n      touchX.value = event.x;\n      translationX.value = ctx.startX + event.translationX;\n      gestureState.value = event.state;\n    },\n    onEnd: (event) => {\n      gestureState.value = event.state;\n\n      const nextOpen =\n        (Math.abs(event.translationX) > SWIPE_DISTANCE_MINIMUM &&\n          Math.abs(event.translationX) > swipeVelocityThreshold) ||\n        Math.abs(event.translationX) > swipeDistanceThreshold\n          ? drawerPosition === 'left'\n            ? // If swiped to right, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) > 0\n            : // If swiped to left, open the drawer, otherwise close it\n              (event.velocityX === 0 ? event.translationX : event.velocityX) < 0\n          : open;\n\n      toggleDrawer(nextOpen, event.velocityX);\n    },\n    onFinish: () => {\n      runOnJS(onGestureFinish)();\n    },\n  });\n\n  const translateX = useDerivedValue(() => {\n    // Comment stolen from react-native-gesture-handler/DrawerLayout\n    //\n    // While closing the drawer when user starts gesture outside of its area (in greyed\n    // out part of the window), we want the drawer to follow only once finger reaches the\n    // edge of the drawer.\n    // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n    // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n    // an arrow pointing left\n    // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n    //    +---------------+    +---------------+    +---------------+    +---------------+\n    //\n    // For the above to work properly we define animated value that will keep start position\n    // of the gesture. Then we use that value to calculate how much we need to subtract from\n    // the translationX. If the gesture started on the greyed out area we take the distance from the\n    // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n    // drawer be pulled back as soon as you start the pan.\n    //\n    // This is used only when drawerType is \"front\"\n    const touchDistance =\n      drawerType === 'front' && gestureState.value === GestureState.ACTIVE\n        ? minmax(\n            drawerPosition === 'left'\n              ? touchStartX.value - drawerWidth\n              : dimensions.width - drawerWidth - touchStartX.value,\n            0,\n            dimensions.width\n          )\n        : 0;\n\n    const translateX =\n      drawerPosition === 'left'\n        ? minmax(translationX.value + touchDistance, -drawerWidth, 0)\n        : minmax(translationX.value - touchDistance, 0, drawerWidth);\n\n    return translateX;\n  });\n\n  const isRTL = I18nManager.getConstants().isRTL;\n  const drawerAnimatedStyle = useAnimatedStyle(() => {\n    const distanceFromEdge = dimensions.width - drawerWidth;\n\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The drawer stays in place when `drawerType` is `back`\n                  (drawerType === 'back' ? 0 : translateX.value) +\n                  (drawerPosition === 'left'\n                    ? isRTL\n                      ? -distanceFromEdge\n                      : 0\n                    : isRTL\n                    ? 0\n                    : distanceFromEdge),\n              },\n            ],\n    };\n  });\n\n  const contentAnimatedStyle = useAnimatedStyle(() => {\n    return {\n      transform:\n        drawerType === 'permanent'\n          ? // Reanimated needs the property to be present, but it results in Browser bug\n            // https://bugs.chromium.org/p/chromium/issues/detail?id=20574\n            []\n          : [\n              {\n                translateX:\n                  // The screen content stays in place when `drawerType` is `front`\n                  drawerType === 'front'\n                    ? 0\n                    : translateX.value +\n                      drawerWidth * (drawerPosition === 'left' ? 1 : -1),\n              },\n            ],\n    };\n  });\n\n  const progress = useDerivedValue(() => {\n    return drawerType === 'permanent'\n      ? 1\n      : interpolate(\n          translateX.value,\n          [getDrawerTranslationX(false), getDrawerTranslationX(true)],\n          [0, 1]\n        );\n  });\n\n  return (\n    <DrawerProgressContext.Provider value={progress}>\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && swipeEnabled}\n        onGestureEvent={onGestureEvent}\n        {...gestureHandlerProps}\n      >\n        {/* Immediate child of gesture handler needs to be an Animated.View */}\n        <Animated.View\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View style={[styles.content, contentAnimatedStyle]}>\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent()}\n            </View>\n            {drawerType !== 'permanent' ? (\n              <Overlay\n                progress={progress}\n                onPress={() => toggleDrawer(false)}\n                style={overlayStyle}\n              />\n            ) : null}\n          </Animated.View>\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            style={[\n              styles.container,\n              {\n                position: drawerType === 'permanent' ? 'relative' : 'absolute',\n                zIndex: drawerType === 'back' ? -1 : 0,\n              },\n              drawerAnimatedStyle,\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent()}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    </DrawerProgressContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    top: 0,\n    bottom: 0,\n    maxWidth: '100%',\n    width: DEFAULT_DRAWER_WIDTH,\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}