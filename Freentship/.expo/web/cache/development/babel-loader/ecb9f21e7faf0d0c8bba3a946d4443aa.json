{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport * as React from 'react';\nexport default function useThenable(create) {\n  var _React$useState = React.useState(create),\n      _React$useState2 = _slicedToArray(_React$useState, 1),\n      promise = _React$useState2[0];\n\n  var initialState = [false, undefined];\n  promise.then(function (result) {\n    initialState = [true, result];\n  });\n\n  var _React$useState3 = React.useState(initialState),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      state = _React$useState4[0],\n      setState = _React$useState4[1];\n\n  var _state = _slicedToArray(state, 1),\n      resolved = _state[0];\n\n  React.useEffect(function () {\n    var cancelled = false;\n\n    var resolve = function () {\n      var _ref = _asyncToGenerator(function* () {\n        var result;\n\n        try {\n          result = yield promise;\n        } finally {\n          if (!cancelled) {\n            setState([true, result]);\n          }\n        }\n      });\n\n      return function resolve() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return function () {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n  return state;\n}","map":{"version":3,"sources":["useThenable.tsx"],"names":["React","initialState","promise","result","cancelled","resolve","setState"],"mappings":";;AAAA,OAAO,KAAP,KAAA,MAAA,OAAA;AAEA,eAAe,SAAA,WAAA,CAAA,MAAA,EAAsD;EACnE,sBAAkBA,KAAK,CAALA,QAAAA,CAAlB,MAAkBA,CAAlB;EAAA;EAAA,IAAM,OAAN;;EAEA,IAAIC,YAAsC,GAAG,CAAA,KAAA,EAHsB,SAGtB,CAA7C;EAGAC,OAAO,CAAPA,IAAAA,CAAcC,UAAAA,MAAD,EAAY;IACvBF,YAAY,GAAG,CAAA,IAAA,EAAfA,MAAe,CAAfA;EADFC,CAAAA;;EAIA,uBAA0BF,KAAK,CAALA,QAAAA,CAA1B,YAA0BA,CAA1B;EAAA;EAAA,IAAM,KAAN;EAAA,IAAM,QAAN;;EACA,4BAAA,KAAA;EAAA,IAAM,QAAN;;EAEAA,KAAK,CAALA,SAAAA,CAAgB,YAAM;IACpB,IAAII,SAAS,GAAb,KAAA;;IAEA,IAAMC,OAAO;MAAA,6BAAG,aAAY;QAC1B,IAAA,MAAA;;QAEA,IAAI;UACFF,MAAM,SAANA,OAAAA;QADF,CAAA,SAEU;UACR,IAAI,CAAJ,SAAA,EAAgB;YACdG,QAAQ,CAAC,CAAA,IAAA,EAATA,MAAS,CAAD,CAARA;UACD;QACF;MATH,CAAa;;MAAA,gBAAPD,OAAO;QAAA;MAAA;IAAA,GAAb;;IAYA,IAAI,CAAJ,QAAA,EAAe;MACbA,OAAO;IACR;;IAED,OAAO,YAAM;MACXD,SAAS,GAATA,IAAAA;IADF,CAAA;EAnBFJ,CAAAA,EAsBG,CAAA,OAAA,EAtBHA,QAsBG,CAtBHA;EAwBA,OAAA,KAAA;AACD","sourcesContent":["import * as React from 'react';\n\nexport default function useThenable<T>(create: () => PromiseLike<T>) {\n  const [promise] = React.useState(create);\n\n  let initialState: [boolean, T | undefined] = [false, undefined];\n\n  // Check if our thenable is synchronous\n  promise.then((result) => {\n    initialState = [true, result];\n  });\n\n  const [state, setState] = React.useState(initialState);\n  const [resolved] = state;\n\n  React.useEffect(() => {\n    let cancelled = false;\n\n    const resolve = async () => {\n      let result;\n\n      try {\n        result = await promise;\n      } finally {\n        if (!cancelled) {\n          setState([true, result]);\n        }\n      }\n    };\n\n    if (!resolved) {\n      resolve();\n    }\n\n    return () => {\n      cancelled = true;\n    };\n  }, [promise, resolved]);\n\n  return state;\n}\n"]},"metadata":{},"sourceType":"module"}